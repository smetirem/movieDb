package views;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.EntityManager;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

public class SearchWrapper extends javax.swing.JInternalFrame {

    EntityManager con = MainMenuWrapper.con;
    controllers.Movie movieContr = new controllers.Movie();
    controllers.Genre genreContr = new controllers.Genre();
    models.Movie movie = new models.Movie();
    controllers.FavoriteList listContr = new controllers.FavoriteList();
    models.FavoriteList favList = new models.FavoriteList();
    Date yearSelected = null;
    Date stopDate;
    SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
    String movieSelectedName;
    String listSelectedName;
    String existsInList;
    private DefaultComboBoxModel comboBoxModel = new DefaultComboBoxModel<models.FavoriteList>();


    public SearchWrapper() {
        initComponents();
       //Απόκρυψη κεντρικής μπάρας του internalJFrame
       ((javax.swing.plaf.basic.BasicInternalFrameUI)this.getUI()).setNorthPane(null);
       //Αρχικοποίηση των elements του frame
       ErrorTextDate.setVisible(false);
       ErrorTextGenre.setVisible(false);
       ErrorTextList.setVisible(false);
       deleteErrorText.setVisible(false);
       
       DateTextField.setText(null);
       
       GenresComboBox.setSelectedIndex(-1);
       comboBoxModel.setSelectedItem(null);
       
       //Μορφοποίηση πίνακα
       resultsTable.setAutoCreateRowSorter(true);
       resultsTable.setRowHeight(25);
       resultsTable.setToolTipText("Διπλό click σε ταινία για την προσθήκη της σε λίστα");
       

            
    }                   
       
    
    
    
     /* This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        bindingGroup = new org.jdesktop.beansbinding.BindingGroup();

        myMoviesPUEntityManager = java.beans.Beans.isDesignTime() ? null : javax.persistence.Persistence.createEntityManagerFactory("myMoviesPU").createEntityManager();
        favoriteListQuery = java.beans.Beans.isDesignTime() ? null : myMoviesPUEntityManager.createQuery("SELECT f FROM FavoriteList f");
        favoriteListList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : favoriteListQuery.getResultList();
        genreQuery = java.beans.Beans.isDesignTime() ? null : myMoviesPUEntityManager.createQuery("SELECT g FROM Genre g");
        genreList = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : genreQuery.getResultList();
        genreQuery1 = java.beans.Beans.isDesignTime() ? null : myMoviesPUEntityManager.createQuery("SELECT g FROM Genre g");
        genreList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : genreQuery1.getResultList();
        favoriteListQuery1 = java.beans.Beans.isDesignTime() ? null : myMoviesPUEntityManager.createQuery("SELECT f FROM FavoriteList f");
        favoriteListList1 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : favoriteListQuery1.getResultList();
        favoriteListQuery2 = java.beans.Beans.isDesignTime() ? null : myMoviesPUEntityManager.createQuery("SELECT f FROM FavoriteList f");
        favoriteListList2 = java.beans.Beans.isDesignTime() ? java.util.Collections.emptyList() : favoriteListQuery2.getResultList();
        jScrollPane1 = new javax.swing.JScrollPane();
        resultsTable = new javax.swing.JTable();
        movieAlreadyExists = new javax.swing.JLabel();
        ErrorTextDate = new javax.swing.JLabel();
        ErrorTextGenre = new javax.swing.JLabel();
        GenresComboBox = new javax.swing.JComboBox<>();
        ErrorTextList = new javax.swing.JLabel();
        DateTextField = new javax.swing.JTextField();
        deleteErrorText = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        SearchButton = new javax.swing.JButton();
        eraseFromList = new javax.swing.JButton();
        clearSelections = new javax.swing.JButton();
        listDropDown = new javax.swing.JComboBox<>();

        setBackground(new java.awt.Color(104, 115, 145));
        setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray, java.awt.Color.darkGray));
        setClosable(true);
        setForeground(java.awt.Color.orange);
        setNormalBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setPreferredSize(new java.awt.Dimension(843, 536));

        resultsTable.setBackground(new java.awt.Color(255, 255, 204));
        resultsTable.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        resultsTable.setFont(new java.awt.Font("Vani", 0, 14)); // NOI18N
        resultsTable.setForeground(new java.awt.Color(102, 102, 102));
        resultsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Τίτλος Ταινίας", "Βαθμολογία", "Περιγραφη"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        resultsTable.setAlignmentX(1.0F);
        resultsTable.setAlignmentY(1.0F);
        resultsTable.setGridColor(new java.awt.Color(255, 255, 204));
        resultsTable.setIntercellSpacing(new java.awt.Dimension(2, 2));
        resultsTable.setSelectionBackground(new java.awt.Color(153, 204, 255));
        resultsTable.setSelectionForeground(new java.awt.Color(255, 255, 153));
        resultsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                resultsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(resultsTable);

        movieAlreadyExists.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        movieAlreadyExists.setForeground(new java.awt.Color(204, 204, 204));
        movieAlreadyExists.setText(" ");

        ErrorTextDate.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ErrorTextDate.setForeground(new java.awt.Color(204, 204, 204));
        ErrorTextDate.setText("Εισάγετε έγκυρη χρονολογία και πιέστε ENTER ");

        ErrorTextGenre.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ErrorTextGenre.setForeground(new java.awt.Color(204, 204, 204));
        ErrorTextGenre.setText("Επιλέξτε είδος");

        GenresComboBox.setToolTipText("");
        GenresComboBox.setBorder(null);
        GenresComboBox.setOpaque(false);

        org.jdesktop.swingbinding.JComboBoxBinding jComboBoxBinding = org.jdesktop.swingbinding.SwingBindings.createJComboBoxBinding(org.jdesktop.beansbinding.AutoBinding.UpdateStrategy.READ_WRITE, genreList, GenresComboBox);
        bindingGroup.addBinding(jComboBoxBinding);

        GenresComboBox.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                GenresComboBoxMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                GenresComboBoxMouseReleased(evt);
            }
        });
        GenresComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenresComboBoxActionPerformed(evt);
            }
        });

        ErrorTextList.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        ErrorTextList.setForeground(new java.awt.Color(204, 204, 204));
        ErrorTextList.setText("Επιλογή λίστας ");

        DateTextField.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        DateTextField.setForeground(new java.awt.Color(51, 51, 51));
        DateTextField.setToolTipText("");
        DateTextField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                DateTextFieldFocusLost(evt);
            }
        });
        DateTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DateTextFieldActionPerformed(evt);
            }
        });
        DateTextField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                DateTextFieldKeyTyped(evt);
            }
        });

        deleteErrorText.setFont(new java.awt.Font("Verdana", 0, 12)); // NOI18N
        deleteErrorText.setForeground(new java.awt.Color(204, 204, 204));
        deleteErrorText.setText("Επιλογή ταινίας ");

        jToolBar1.setBackground(new java.awt.Color(104, 115, 145));
        jToolBar1.setBorder(null);
        jToolBar1.setFloatable(false);
        jToolBar1.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jToolBar1.setRollover(true);

        SearchButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        SearchButton.setForeground(new java.awt.Color(51, 51, 51));
        SearchButton.setText("Αναζήτηση");
        SearchButton.setActionCommand(" Αναζήτηση");
        SearchButton.setBorder(null);
        SearchButton.setDebugGraphicsOptions(javax.swing.DebugGraphics.NONE_OPTION);
        SearchButton.setFocusable(false);
        SearchButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        SearchButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        SearchButton.setOpaque(false);
        SearchButton.setPreferredSize(new java.awt.Dimension(103, 80));
        SearchButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(SearchButton);

        eraseFromList.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        eraseFromList.setForeground(new java.awt.Color(51, 51, 51));
        eraseFromList.setText("Αφαίρεση");
        eraseFromList.setBorder(null);
        eraseFromList.setFocusable(false);
        eraseFromList.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        eraseFromList.setMargin(new java.awt.Insets(0, 0, 0, 0));
        eraseFromList.setOpaque(false);
        eraseFromList.setPreferredSize(new java.awt.Dimension(103, 80));
        eraseFromList.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        eraseFromList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                eraseFromListActionPerformed(evt);
            }
        });
        jToolBar1.add(eraseFromList);

        clearSelections.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        clearSelections.setForeground(new java.awt.Color(51, 51, 51));
        clearSelections.setText("Καθαρισμός");
        clearSelections.setBorder(null);
        clearSelections.setFocusable(false);
        clearSelections.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        clearSelections.setMargin(new java.awt.Insets(0, 0, 0, 0));
        clearSelections.setOpaque(false);
        clearSelections.setPreferredSize(new java.awt.Dimension(103, 80));
        clearSelections.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        clearSelections.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectionsActionPerformed(evt);
            }
        });
        jToolBar1.add(clearSelections);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(ErrorTextDate)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(deleteErrorText)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(DateTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                                .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                        .addGap(13, 13, 13))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(listDropDown, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGap(16, 16, 16)))
                                .addGap(37, 37, 37)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(203, 203, 203)
                                        .addComponent(movieAlreadyExists, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addComponent(ErrorTextGenre)
                                            .addGap(28, 28, 28)
                                            .addComponent(GenresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 652, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(ErrorTextList))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ErrorTextDate)
                    .addComponent(GenresComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ErrorTextGenre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(movieAlreadyExists, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(DateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(deleteErrorText)
                        .addGap(30, 30, 30)
                        .addComponent(listDropDown, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(ErrorTextList)))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        bindingGroup.bind();

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void DateTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DateTextFieldActionPerformed

    }//GEN-LAST:event_DateTextFieldActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        clearTable(resultsTable);
        //Εάν ο χρήστης έχει επιλέξει τα απαραίτητα πεδία
        if (GenresComboBox.getSelectedItem() != null && (yearSelected != null)){
            ErrorTextDate.setVisible(false);
            ErrorTextGenre.setVisible(false);
            String genreSelected = GenresComboBox.getSelectedItem().toString();
            List<models.Movie> movieList = movieContr.findByGenreAndDate(myMoviesPUEntityManager, genreSelected, yearSelected, stopDate);
            showTable(movieList, resultsTable);
        }
        //Εάν όχι εμφάνιση κατάλληλης ένδειξης
        if (GenresComboBox.getSelectedItem() == null) {
            ErrorTextGenre.setVisible(true);}
            else {ErrorTextGenre.setVisible(false);
            }
        if  (yearSelected == null ){
            ErrorTextDate.setVisible(true);}
            else {ErrorTextDate.setVisible(false);
            }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void GenresComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenresComboBoxActionPerformed

    }//GEN-LAST:event_GenresComboBoxActionPerformed

    private void DateTextFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_DateTextFieldKeyTyped
        //Ευρεση σημερινής ημερομηνίας
        Integer thisYear = Calendar.getInstance().get(Calendar.YEAR);
        char TestChar=evt.getKeyChar();
        // Περιορισμόι εισαγωγής στο search textField
        if(!(Character.isDigit(TestChar)) || DateTextField.getText().length() > 3) {
            evt.consume();
            try{
                //Μετατροπή string σε ακέραιο
                Integer i = Integer.parseInt(DateTextField.getText());
                // Aν η ημερομηνία κυκλοφόρίας της ταινίας βρίσκεται σε ένα λογικό χρονικό πλαίσιο
                if (i > 1850 && i <= thisYear) {
                //Εκχώρηση τιμών σε πεδία date που αποτελούν άκρα του χρονικού διαστήματος
                //ώστε να γίνει έλεγχος μέσα ολόκληρο έτος
                yearSelected = formatter.parse("01-01-"+DateTextField.getText()+" 00:00:00");
                stopDate = formatter.parse("31-12-"+DateTextField.getText()+" 00:00:00");
                ErrorTextDate.setVisible(false);
                }
                else {
                    DateTextField.setText(DateTextField.getText());
                    ErrorTextDate.setVisible(true);
                    yearSelected = null;
                    }
                    }
            catch (NumberFormatException e){
            } catch (ParseException ex) {
                Logger.getLogger(SearchWrapper.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_DateTextFieldKeyTyped

    private void DateTextFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_DateTextFieldFocusLost

    }//GEN-LAST:event_DateTextFieldFocusLost

    private void GenresComboBoxMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenresComboBoxMouseClicked

    }//GEN-LAST:event_GenresComboBoxMouseClicked

    private void GenresComboBoxMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_GenresComboBoxMouseReleased

    }//GEN-LAST:event_GenresComboBoxMouseReleased

    private void clearSelectionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectionsActionPerformed
        //Καθαρισμός όλων των πεδίων και του πίνακα
        yearSelected = null;
        DateTextField.setText(null);
        GenresComboBox.setSelectedIndex(-1);
        clearTable(resultsTable);
        comboBoxModel.setSelectedItem(null);
    }//GEN-LAST:event_clearSelectionsActionPerformed

    private void eraseFromListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_eraseFromListActionPerformed
    Integer selected = resultsTable.getSelectedRow();
    //Αν έχει επιλεχθεί κάτι από το πίνακα
    if(selected != -1){
        if (movie.getFavoriteListId() != null) {//Αν Η ταινία που επιλέχθηκε ανήκει σε κάποιο λίστα
        confirmErase();//Αναμονή για επιβεβαίωση από το χρήστη
        }
        errorMovieDoesNotExists();   
    }  
    deleteErrorText.setVisible(true);//Αν δεν έχει επιλεχθεί κάτι από το πίνακα εμφανίζεται κατάλληλη ένδειξη
    }//GEN-LAST:event_eraseFromListActionPerformed

    private void resultsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_resultsTableMouseClicked
    
    ErrorTextList.setVisible(false);
    movieAlreadyExists.setVisible(false);
    deleteErrorText.setVisible(false);
    
    //Ευρεση ταινίας που επιλέχθηκε από τον πίνακα αποτελεμάτων και ονόματος λίστας
    movieSelectedName = (String) resultsTable.getValueAt(resultsTable.getSelectedRow(), 0);
    movie = movieContr.findByName(con, movieSelectedName);
    
    
    if (movie.getFavoriteListId() != null) {// Εάν η ταινία ανήκει σε κάποια  λίστα
        movieAlreadyExists.setText("Η ταινία " +movie.getTitle()+ " ανήκει ήδη στη λίστα " +movie.getFavoriteListId().getName());  
        movieAlreadyExists.setVisible(true);
        }
        else {//Εαν δεν ανηκει σε κάποια λίστα
       if (listDropDown.getSelectedItem() != null){  //Εαν έχει επιλεχθει λίστα από το comboBox
            favList = listContr.getListByName(con, listDropDown.getSelectedItem().toString());
            confirmAdding();// Εμφάνιση MessageDialogBox για επιβεβαίωση
            } 
            ErrorTextList.setVisible(true); 
        }
    }//GEN-LAST:event_resultsTableMouseClicked
   
    //Μέθοδος που εμφανίζει δεδομένα από λίστα σε πίνακα
    private void showTable(List<models.Movie> list, JTable table){

    DefaultTableModel tModel = (DefaultTableModel) table.getModel();
    DefaultTableCellRenderer centerRenderer = new DefaultTableCellRenderer();
    centerRenderer.setHorizontalAlignment(JLabel.CENTER);
    table.getColumnModel().getColumn(1).setCellRenderer( centerRenderer );

    String[] ob = new String[50];
       tModel.setRowCount(0);
       table.getColumnModel().getColumn(0).setMinWidth(100);
       table.getColumnModel().getColumn(1).setMinWidth(10);
       table.getColumnModel().getColumn(2).setMinWidth(460);
    for (int i = 0; i < list.size(); i++){
        {ob[0] = list.get(i).getTitle();
         ob[1] = list.get(i).getVoteAverage().toString();
         ob[2] = list.get(i).getOverview();
         tModel.addRow(ob);}
        }
    }

    //Μέθοδος που διαγράφει τις εγγραφές ενός πίνακα
    public void clearTable(JTable table){
    DefaultTableModel model = (DefaultTableModel)table.getModel();
    model.getDataVector().removeAllElements();
    model.fireTableDataChanged(); // notifies the JTable that the model has changed
    }

    // Παράθυρο διαλόγου για την επιβεβείωση εγγραφής ταινίας σε λίστα
    private void confirmAdding()  {
    Object[] options = {"Οχι","Ναι"};
    Integer confirm = JOptionPane.showOptionDialog(null, "Να προστεθεί η ταινία " + movie.getTitle() + " στη λίστα "
        +favList.getName() + ";","Επιβεβαίωση Πρόσθεσης",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]);
            if (confirm == 1) {
            //Εισαγωγή ταινίας σε συλλογή
            listContr.addMovieToAList(con, movie, favList);
            movieContr.addMovieToAList(con, movie, favList);
            confirmationMessage();
            }
    }
    
    // Παράθυρο διαλόγου για την επιβεβείωση διαγραφής ταινίας σε λίστα
    private void confirmErase()  {
    Object[] options = {"Οχι","Ναι"};
    Integer confirm = JOptionPane.showOptionDialog(null, "Να διαγραφεί η ταινία " + movie.getTitle() + " από τη λίστα "
        +movie.getFavoriteListId().getName() + ";","Επιβεβαίωση διαγραφής",
        JOptionPane.YES_NO_OPTION,
        JOptionPane.QUESTION_MESSAGE,
        null,
        options,
        options[0]);
            if (confirm == 1) {
            //Διαγραφή ενημερώνοντας και τα δύο entities (λόγω συσχέτισης)
            favList = listContr.getListByName(con, movie.getFavoriteListId().getName());
            listContr.deleteMovieFromList(con, movie, favList);
            movieContr.deleteMovieFromAAList(con, movie);
            confirmationMessage();
            }
    }

    // Παράθυρο διαλόγου για την ενημέρωση πως η ταινία ανήεκι ήδη σε λίστα
    private void errorMovieDoesNotExists()  {
        JOptionPane.showMessageDialog(null,"Η ταινια "+ movie.getTitle() +" δεν ανήκει σε καμία λίστα "
        ,"Σφάλμα",
        JOptionPane.ERROR_MESSAGE);
    }

    private void confirmationMessage()  {
    JOptionPane.showMessageDialog( null,
    "Διεργασία Ολοκληρώθηκε","",
    JOptionPane.INFORMATION_MESSAGE);
    }

       public void refreshComboBox(){
        comboBoxModel.removeAllElements();
        
       List favList = controllers.FavoriteList.getAllFavoriteListsFromDerbyDb(con);
        favList.forEach(fav -> {
            comboBoxModel.addElement(fav);
        }); 
        comboBoxModel.setSelectedItem(null);
        listDropDown.setModel(comboBoxModel);
        
       }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField DateTextField;
    private javax.swing.JLabel ErrorTextDate;
    private javax.swing.JLabel ErrorTextGenre;
    private javax.swing.JLabel ErrorTextList;
    private javax.swing.JComboBox<String> GenresComboBox;
    private javax.swing.JButton SearchButton;
    private javax.swing.JButton clearSelections;
    private javax.swing.JLabel deleteErrorText;
    private javax.swing.JButton eraseFromList;
    private java.util.List<models.FavoriteList> favoriteListList;
    private java.util.List<models.FavoriteList> favoriteListList1;
    private java.util.List<models.FavoriteList> favoriteListList2;
    private javax.persistence.Query favoriteListQuery;
    private javax.persistence.Query favoriteListQuery1;
    private javax.persistence.Query favoriteListQuery2;
    private java.util.List<models.Genre> genreList;
    private java.util.List<models.Genre> genreList1;
    private javax.persistence.Query genreQuery;
    private javax.persistence.Query genreQuery1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JComboBox<String> listDropDown;
    private javax.swing.JLabel movieAlreadyExists;
    private javax.persistence.EntityManager myMoviesPUEntityManager;
    private javax.swing.JTable resultsTable;
    private org.jdesktop.beansbinding.BindingGroup bindingGroup;
    // End of variables declaration//GEN-END:variables
}
